name: front end Continuous Deployment workflow
on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  #manual trigger
  workflow_dispatch:
     paths:
      - 'starter/frontend/**'
  
env:
  REPOSITORY: frontend_code
  INAGE_TAG: ${{ github.sha }}
  
 
jobs:
  
  test:
    runs-on: ubuntu-latest
        
    steps:
      # Simulate a Deployment
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-    
      
      - name: Install dependencies
        run: cd starter/frontend && npm ci
      
      - name: running test interactively
        run: cd starter/frontend && npm test

  build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      # Simulate a Deployment
      #
      - name:  Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: 'Get Login to AWS ECR'
        id: ecr-login
        uses:  aws-actions/amazon-ecr-login@v1
        
      - name: Build tag push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd starter/frontend
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }} --tag=$REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

     
